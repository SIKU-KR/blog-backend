name: CD - Build, Push and Deploy

on:
  push:
    branches: [ main, master ] # main 또는 master 브랜치에 푸시될 때
  pull_request:
    branches: [ main, master ] # PR 관련 이벤트 발생 시 (open, synchronize, closed 등)

jobs:
  build_and_push_docker:
    name: Build Docker Image and Push to GHCR
    # push 이벤트이거나, PR이 merge된 경우에만 실행
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions: # GHCR에 푸시하기 위한 권한
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }} # GitHub Secrets에 GHCR_PAT (Personal Access Token) 저장 필요

      - name: Convert repository name to lowercase
        id: repo_name
        run: echo "REPO_LC=ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REPO_LC }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') || github.ref == format('refs/heads/{0}', 'master') }} # main/master 브랜치에만 latest 태그

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/arm64 # 필요에 따라 플랫폼 변경
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_server:
    name: Deploy to Server
    needs: build_and_push_docker # Docker 이미지 빌드 및 푸시 완료 후 실행
    # push 이벤트이거나, PR이 merge된 경우에만 실행 (build_and_push_docker와 동일한 조건)
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - name: Convert repository name to lowercase for deployment
        run: |
          echo "IMAGE=ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]'):latest" >> $GITHUB_ENV

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3 # 버전 명시 권장
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22 # 기본값이지만 명시적으로 작성
          script: |
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker pull ${{ env.IMAGE }}
            docker stop blog-backend || true # 컨테이너가 없을 경우 에러 방지
            docker rm blog-backend || true    # 컨테이너가 없을 경우 에러 방지

            docker run -d \
              --name blog-backend \
              -p 8080:8080 \
              --restart unless-stopped \
              -v ./logs:/app/logs
              -e SPRING_APPLICATION_NAME=bumsiku \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
              -e SPRING_JPA_OPEN_IN_VIEW=false \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true \
              -e SPRING_JPA_SHOW_SQL=true \
              -e SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MySQL8Dialect \
              -e ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" \
              -e SERVER_SERVLET_SESSION_TIMEOUT=2h \
              -e SERVER_SERVLET_SESSION_COOKIE_SECURE=true \
              -e SERVER_SERVLET_SESSION_COOKIE_SAME_SITE=None \
              -e SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE=20MB \
              -e SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE=20MB \
              -e SPRINGDOC_PACKAGES_TO_SCAN=park.bumsiku.controller \
              -e SPRINGDOC_API_INFO_TITLE="Bumsiku Blog API" \
              -e SPRINGDOC_API_INFO_VERSION=v1.0.0 \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_CREDENTIALS_ACCESS_KEY }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_CREDENTIALS_SECRET_KEY }}" \
              -e AWS_REGION=ap-northeast-2 \
              -e AWS_STACK_AUTO=false \
              -e AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
              -e AWS_S3_BUCKET_URL="${{ secrets.AWS_S3_BUCKET_URL }}" \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=* \
              ${{ env.IMAGE }}